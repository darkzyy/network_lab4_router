!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUF_SIZE	arp_example.c	20;"	d	file:
DEVICE	arp_example.c	21;"	d	file:
ETH_ARP	arp_example.c	24;"	d	file:
ETH_MAC_LEN	arp_example.c	23;"	d	file:
ETH_P_NULL	arp_example.c	22;"	d	file:
MAX_ARP_SIZE	conf.h	5;"	d
MAX_DEVICE_SIZE	conf.h	6;"	d
MAX_ROUTE_INFO_SIZE	conf.h	4;"	d
__CONF_H__	conf.h	2;"	d
__HEADERS_H__	headers.h	2;"	d
answered_packets	arp_example.c	/^long answered_packets = 0;$/;"	v
arp_buffer_send	router.c	/^arp_header arp_buffer_send;$/;"	v
arp_dha	arp_example.c	/^    unsigned char arp_dha[6];$/;"	m	struct:arp_header	file:	access:public
arp_dha	headers.h	/^    unsigned char arp_dha[6];$/;"	m	struct:arp_header	access:public
arp_dpa	arp_example.c	/^    unsigned char arp_dpa[4];$/;"	m	struct:arp_header	file:	access:public
arp_dpa	headers.h	/^    unsigned char arp_dpa[4];$/;"	m	struct:arp_header	access:public
arp_entry_hit	router.c	/^inline int arp_entry_hit(int i,unsigned int dst_ip){$/;"	f	signature:(int i,unsigned int dst_ip)
arp_hd	arp_example.c	/^    unsigned short arp_hd;$/;"	m	struct:arp_header	file:	access:public
arp_hd	headers.h	/^    unsigned short arp_hd;$/;"	m	struct:arp_header	access:public
arp_hdl	arp_example.c	/^    unsigned char arp_hdl;$/;"	m	struct:arp_header	file:	access:public
arp_hdl	headers.h	/^    unsigned char arp_hdl;$/;"	m	struct:arp_header	access:public
arp_header	arp_example.c	/^struct __attribute__((packed)) arp_header$/;"	s	file:
arp_header	headers.h	/^struct __attribute__((packed)) arp_header{$/;"	s
arp_header	headers.h	/^typedef struct arp_header arp_header;$/;"	t	typeref:struct:arp_header
arp_header::arp_dha	arp_example.c	/^    unsigned char arp_dha[6];$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_dha	headers.h	/^    unsigned char arp_dha[6];$/;"	m	struct:arp_header	access:public
arp_header::arp_dpa	arp_example.c	/^    unsigned char arp_dpa[4];$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_dpa	headers.h	/^    unsigned char arp_dpa[4];$/;"	m	struct:arp_header	access:public
arp_header::arp_hd	arp_example.c	/^    unsigned short arp_hd;$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_hd	headers.h	/^    unsigned short arp_hd;$/;"	m	struct:arp_header	access:public
arp_header::arp_hdl	arp_example.c	/^    unsigned char arp_hdl;$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_hdl	headers.h	/^    unsigned char arp_hdl;$/;"	m	struct:arp_header	access:public
arp_header::arp_op	arp_example.c	/^    unsigned short arp_op;$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_op	headers.h	/^    unsigned short arp_op;$/;"	m	struct:arp_header	access:public
arp_header::arp_pr	arp_example.c	/^    unsigned short arp_pr;$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_pr	headers.h	/^    unsigned short arp_pr;$/;"	m	struct:arp_header	access:public
arp_header::arp_prl	arp_example.c	/^    unsigned char arp_prl;$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_prl	headers.h	/^    unsigned char arp_prl;$/;"	m	struct:arp_header	access:public
arp_header::arp_sha	arp_example.c	/^    unsigned char arp_sha[6];$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_sha	headers.h	/^    unsigned char arp_sha[6];$/;"	m	struct:arp_header	access:public
arp_header::arp_spa	arp_example.c	/^    unsigned char arp_spa[4];$/;"	m	struct:arp_header	file:	access:public
arp_header::arp_spa	headers.h	/^    unsigned char arp_spa[4];$/;"	m	struct:arp_header	access:public
arp_op	arp_example.c	/^    unsigned short arp_op;$/;"	m	struct:arp_header	file:	access:public
arp_op	headers.h	/^    unsigned short arp_op;$/;"	m	struct:arp_header	access:public
arp_pr	arp_example.c	/^    unsigned short arp_pr;$/;"	m	struct:arp_header	file:	access:public
arp_pr	headers.h	/^    unsigned short arp_pr;$/;"	m	struct:arp_header	access:public
arp_prl	arp_example.c	/^    unsigned char arp_prl;$/;"	m	struct:arp_header	file:	access:public
arp_prl	headers.h	/^    unsigned char arp_prl;$/;"	m	struct:arp_header	access:public
arp_reply	router.c	/^void arp_reply(unsigned char* eth, arp_header* arph){$/;"	f	signature:(unsigned char* eth, arp_header* arph)
arp_request	router.c	/^int arp_request(unsigned int dst_ip,int index){\/\/index是在arp table中的下标$/;"	f	signature:(unsigned int dst_ip,int index)
arp_sha	arp_example.c	/^    unsigned char arp_sha[6];$/;"	m	struct:arp_header	file:	access:public
arp_sha	headers.h	/^    unsigned char arp_sha[6];$/;"	m	struct:arp_header	access:public
arp_spa	arp_example.c	/^    unsigned char arp_spa[4];$/;"	m	struct:arp_header	file:	access:public
arp_spa	headers.h	/^    unsigned char arp_spa[4];$/;"	m	struct:arp_header	access:public
arp_tab	router.c	/^arp_table_item	arp_tab[MAX_ARP_SIZE];$/;"	v
arp_table_init	router.c	/^void arp_table_init(){$/;"	f
arp_table_item	conf.h	/^struct arp_table_item{  $/;"	s
arp_table_item	conf.h	/^typedef struct arp_table_item arp_table_item;$/;"	t	typeref:struct:arp_table_item
arp_table_item::ip_addr	conf.h	/^	unsigned int ip_addr; $/;"	m	struct:arp_table_item	access:public
arp_table_item::mac_addr	conf.h	/^	char mac_addr[18]; $/;"	m	struct:arp_table_item	access:public
arp_table_item::valid	conf.h	/^	int valid;$/;"	m	struct:arp_table_item	access:public
arp_timeout	router.c	/^pthread_mutex_t arp_timeout;$/;"	v
buffer	arp_example.c	/^void* buffer = NULL;$/;"	v
buffer_len	router.c	13;"	d	file:
chksum	headers.h	/^unsigned short chksum(unsigned short*buff,int len){$/;"	f	signature:(unsigned short*buff,int len)
destination	conf.h	/^	unsigned int destination; $/;"	m	struct:route_item	access:public
device_item	conf.h	/^struct device_item{  $/;"	s
device_item	conf.h	/^typedef struct device_item device_item;$/;"	t	typeref:struct:device_item
device_item::interface	conf.h	/^	char interface[14]; $/;"	m	struct:device_item	access:public
device_item::mac_addr	conf.h	/^	char mac_addr[18]; $/;"	m	struct:device_item	access:public
device_tab	router.c	/^device_item		device_tab[MAX_DEVICE_SIZE];$/;"	v
forward_ip_datagram	router.c	/^void forward_ip_datagram(unsigned char* eth,unsigned int dst_ip,char* interface);$/;"	p	file:	signature:(unsigned char* eth,unsigned int dst_ip,char* interface)
forward_ip_datagram	router.c	/^void forward_ip_datagram(unsigned char* eth,unsigned int dst_ip,char* interface){$/;"	f	signature:(unsigned char* eth,unsigned int dst_ip,char* interface)
gateway	conf.h	/^	unsigned int gateway; $/;"	m	struct:route_item	access:public
interface	conf.h	/^	char interface[14]; $/;"	m	struct:device_item	access:public
interface	conf.h	/^	char interface[16]; $/;"	m	struct:route_item	access:public
ip_addr	conf.h	/^	unsigned int ip_addr; $/;"	m	struct:arp_table_item	access:public
ip_datagram_handle	router.c	/^void ip_datagram_handle(unsigned char* eth,ip_header* iph){$/;"	f	signature:(unsigned char* eth,ip_header* iph)
ip_header	headers.h	/^struct __attribute__((packed)) ip_header {$/;"	s
ip_header	headers.h	/^typedef struct ip_header ip_header;$/;"	t	typeref:struct:ip_header
ip_header::iph_chksum	headers.h	/^    unsigned short int iph_chksum;$/;"	m	struct:ip_header	access:public
ip_header::iph_destip	headers.h	/^    unsigned int       iph_destip;$/;"	m	struct:ip_header	access:public
ip_header::iph_flag_offset	headers.h	/^    unsigned short int iph_flag_offset;$/;"	m	struct:ip_header	access:public
ip_header::iph_ident	headers.h	/^    unsigned short int iph_ident;$/;"	m	struct:ip_header	access:public
ip_header::iph_ihl	headers.h	/^    unsigned char      iph_ihl:4, iph_ver:4;$/;"	m	struct:ip_header	access:public
ip_header::iph_len	headers.h	/^    unsigned short int iph_len;$/;"	m	struct:ip_header	access:public
ip_header::iph_protocol	headers.h	/^    unsigned char      iph_protocol;$/;"	m	struct:ip_header	access:public
ip_header::iph_sourceip	headers.h	/^    unsigned int       iph_sourceip;$/;"	m	struct:ip_header	access:public
ip_header::iph_tos	headers.h	/^    unsigned char      iph_tos;$/;"	m	struct:ip_header	access:public
ip_header::iph_ttl	headers.h	/^    unsigned char      iph_ttl;$/;"	m	struct:ip_header	access:public
ip_header::iph_ver	headers.h	/^    unsigned char      iph_ihl:4, iph_ver:4;$/;"	m	struct:ip_header	access:public
iph_chksum	headers.h	/^    unsigned short int iph_chksum;$/;"	m	struct:ip_header	access:public
iph_destip	headers.h	/^    unsigned int       iph_destip;$/;"	m	struct:ip_header	access:public
iph_flag_offset	headers.h	/^    unsigned short int iph_flag_offset;$/;"	m	struct:ip_header	access:public
iph_ident	headers.h	/^    unsigned short int iph_ident;$/;"	m	struct:ip_header	access:public
iph_ihl	headers.h	/^    unsigned char      iph_ihl:4, iph_ver:4;$/;"	m	struct:ip_header	access:public
iph_len	headers.h	/^    unsigned short int iph_len;$/;"	m	struct:ip_header	access:public
iph_protocol	headers.h	/^    unsigned char      iph_protocol;$/;"	m	struct:ip_header	access:public
iph_sourceip	headers.h	/^    unsigned int       iph_sourceip;$/;"	m	struct:ip_header	access:public
iph_tos	headers.h	/^    unsigned char      iph_tos;$/;"	m	struct:ip_header	access:public
iph_ttl	headers.h	/^    unsigned char      iph_ttl;$/;"	m	struct:ip_header	access:public
iph_ver	headers.h	/^    unsigned char      iph_ihl:4, iph_ver:4;$/;"	m	struct:ip_header	access:public
mac_addr	conf.h	/^	char mac_addr[18]; $/;"	m	struct:arp_table_item	access:public
mac_addr	conf.h	/^	char mac_addr[18]; $/;"	m	struct:device_item	access:public
main	arp_example.c	/^int main(void) {$/;"	f	signature:(void)
main	gen_route_tab.c	/^int main(){$/;"	f
main	router.c	/^int main(){$/;"	f
main_loop	router.c	/^void main_loop(){$/;"	f
my_ip_addr	router.c	/^const char* my_ip_addr = "192.168.x.x";$/;"	v
my_ip_addr_int	router.c	/^const unsigned int my_ip_addr_int = 0;$/;"	v
my_mac_addr	router.c	/^const char* my_mac_addr = "x.x.x...";$/;"	v
netmask	conf.h	/^	unsigned int netmask; $/;"	m	struct:route_item	access:public
proto_arp	router.c	14;"	d	file:
proto_ip	router.c	15;"	d	file:
read_route_tab	router.c	/^void read_route_tab(const char* filename){$/;"	f	signature:(const char* filename)
route_entry_hit	router.c	/^inline int route_entry_hit(int i,unsigned int dst_ip){$/;"	f	signature:(int i,unsigned int dst_ip)
route_item	conf.h	/^struct route_item{ $/;"	s
route_item	conf.h	/^typedef struct route_item route_item;$/;"	t	typeref:struct:route_item
route_item::destination	conf.h	/^	unsigned int destination; $/;"	m	struct:route_item	access:public
route_item::gateway	conf.h	/^	unsigned int gateway; $/;"	m	struct:route_item	access:public
route_item::interface	conf.h	/^	char interface[16]; $/;"	m	struct:route_item	access:public
route_item::netmask	conf.h	/^	unsigned int netmask; $/;"	m	struct:route_item	access:public
route_item::valid	conf.h	/^	int valid;$/;"	m	struct:route_item	access:public
route_tab	gen_route_tab.c	/^route_item      route_tab[MAX_ROUTE_INFO_SIZE];$/;"	v
route_tab	router.c	/^route_item		route_tab[MAX_ROUTE_INFO_SIZE];$/;"	v
s	arp_example.c	/^int s = -1; \/*Socketdescriptor*\/$/;"	v
sigint	arp_example.c	/^void sigint(int signum) {$/;"	f	signature:(int signum)
sigint	arp_example.c	/^void sigint(int signum);$/;"	p	file:	signature:(int signum)
sock_fd	router.c	/^int sock_fd;\/\/套接字$/;"	v
socket_buffer	router.c	/^unsigned char socket_buffer[buffer_len];$/;"	v
socket_buffer_arp	router.c	/^unsigned char socket_buffer_arp[buffer_len];$/;"	v
total_packets	arp_example.c	/^long total_packets = 0;$/;"	v
valid	conf.h	/^	int valid;$/;"	m	struct:arp_table_item	access:public
valid	conf.h	/^	int valid;$/;"	m	struct:route_item	access:public
